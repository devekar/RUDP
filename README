devekar.1@osu.edu


How to run program
------------------
CLIENT END: gamma
SERVER END: beta

1) Open 6 ssh terminals, 3 for gamma and other 3 for beta.
2) Execute make on any terminal to compile:
   make
3) Run troll on a beta and a gamma terminal:
   On beta: make server_troll
   On gamma: make client_troll
   
4) Run tcpd on a beta and a gamma terminal:
   make run_tcpd
	
5) Run ftps on beta:
   make run_ftps
   
   Run ftpc on gamma:
   make run_ftpc
   OR
   make run_ftpc file=<FILE_TO_BE_SENT>



      
Packet format for IPC between user process and TCPD
---------------------------------------------------
Control byte + Optional data

Control byte:
X: SOCKET
S: SEND
R: RECEIVE
B: BIND
L: LISTEN
A: ACCEPT
C: CONNECT
Y: CLOSE


Description
-------
1) ftpc.c ftps.c
These files remain the same as in lab1 except for 2 changes: a include header statement for user_tcp.h and all the socket related functions are capitalized to refer the functions defined in user_tcp.h .

2) user_tcp.h
It defines the SOCKET, SEND, RECV and CLOSE functions. It communicates with the local TCPD using UDP. To help distinguish between function calls, the first byte of any packet send to TCPD defines the function. We call this the control byte. 
SOCKET(): Create socket for communication with TCPD and test if connection works by sending a single byte 'X'. We expect TCPD send back the byte.
SEND(): Construct packet with control byte 'S' followed by the data and send it to TCPD. Sleeps for 10 ms to prevent buffer overrun.
RECV(): Send control byte 'R' to TCPD so that it can wait for packet from remote host. We expect TCPD to send the received data.
CLOSE(): Close the socket used for communication with TCPD.

3) tcpd.c
TCPD creates 3 sockets, one for communicating with user process(ftpc/ftps), one for sending data to troll and one for receiving data from remote host. It then runs in a loop waiting for packet from user process. Depending on control byte, it executes switch-case to perform specific actions as explained before.

4) global.h
It defines the constants such as port numbers and MSS. Used by tcpd.c and user_tcp.h .

